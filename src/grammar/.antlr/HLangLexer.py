# Generated from c:/Users/khahu/Desktop/CO3005_Assignment/src/grammar/OPLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,66,504,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,4,24,276,8,24,11,24,12,24,277,1,24,1,24,1,25,1,25,
        5,25,284,8,25,10,25,12,25,287,9,25,1,25,1,25,1,26,1,26,1,26,1,26,
        5,26,295,8,26,10,26,12,26,298,9,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,
        1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,
        1,56,1,57,4,57,373,8,57,11,57,12,57,374,1,58,4,58,378,8,58,11,58,
        12,58,379,1,58,1,58,5,58,384,8,58,10,58,12,58,387,9,58,1,58,1,58,
        3,58,391,8,58,1,58,4,58,394,8,58,11,58,12,58,395,3,58,398,8,58,1,
        58,4,58,401,8,58,11,58,12,58,402,1,58,1,58,3,58,407,8,58,1,58,4,
        58,410,8,58,11,58,12,58,411,3,58,414,8,58,1,59,1,59,4,59,418,8,59,
        11,59,12,59,419,1,59,4,59,423,8,59,11,59,12,59,424,1,59,1,59,3,59,
        429,8,59,3,59,431,8,59,1,60,1,60,1,60,5,60,436,8,60,10,60,12,60,
        439,9,60,1,60,1,60,1,61,1,61,1,61,5,61,446,8,61,10,61,12,61,449,
        9,61,1,61,1,61,1,62,1,62,1,62,5,62,456,8,62,10,62,12,62,459,9,62,
        1,62,1,62,1,63,1,63,1,63,5,63,466,8,63,10,63,12,63,469,9,63,1,63,
        3,63,472,8,63,1,63,1,63,3,63,476,8,63,1,63,3,63,479,8,63,1,64,1,
        64,3,64,483,8,64,1,64,1,64,1,64,5,64,488,8,64,10,64,12,64,491,9,
        64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,
        296,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,
        129,65,131,0,133,0,135,0,137,0,139,66,1,0,8,3,0,9,10,12,13,32,32,
        2,0,10,10,13,13,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,
        34,34,92,92,1,0,48,57,2,0,65,90,97,122,7,0,34,34,92,92,98,98,102,
        102,110,110,114,114,116,116,531,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
        0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
        115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,
        0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,139,1,0,0,0,1,141,
        1,0,0,0,3,149,1,0,0,0,5,155,1,0,0,0,7,161,1,0,0,0,9,170,1,0,0,0,
        11,173,1,0,0,0,13,178,1,0,0,0,15,186,1,0,0,0,17,192,1,0,0,0,19,195,
        1,0,0,0,21,199,1,0,0,0,23,203,1,0,0,0,25,210,1,0,0,0,27,215,1,0,
        0,0,29,219,1,0,0,0,31,226,1,0,0,0,33,231,1,0,0,0,35,237,1,0,0,0,
        37,242,1,0,0,0,39,246,1,0,0,0,41,251,1,0,0,0,43,257,1,0,0,0,45,264,
        1,0,0,0,47,267,1,0,0,0,49,275,1,0,0,0,51,281,1,0,0,0,53,290,1,0,
        0,0,55,304,1,0,0,0,57,306,1,0,0,0,59,308,1,0,0,0,61,310,1,0,0,0,
        63,312,1,0,0,0,65,314,1,0,0,0,67,316,1,0,0,0,69,319,1,0,0,0,71,322,
        1,0,0,0,73,324,1,0,0,0,75,326,1,0,0,0,77,329,1,0,0,0,79,332,1,0,
        0,0,81,335,1,0,0,0,83,338,1,0,0,0,85,340,1,0,0,0,87,342,1,0,0,0,
        89,345,1,0,0,0,91,347,1,0,0,0,93,349,1,0,0,0,95,351,1,0,0,0,97,353,
        1,0,0,0,99,355,1,0,0,0,101,357,1,0,0,0,103,359,1,0,0,0,105,361,1,
        0,0,0,107,363,1,0,0,0,109,365,1,0,0,0,111,367,1,0,0,0,113,369,1,
        0,0,0,115,372,1,0,0,0,117,413,1,0,0,0,119,430,1,0,0,0,121,432,1,
        0,0,0,123,442,1,0,0,0,125,452,1,0,0,0,127,462,1,0,0,0,129,482,1,
        0,0,0,131,492,1,0,0,0,133,494,1,0,0,0,135,496,1,0,0,0,137,499,1,
        0,0,0,139,502,1,0,0,0,141,142,5,98,0,0,142,143,5,111,0,0,143,144,
        5,111,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,147,5,97,0,0,147,
        148,5,110,0,0,148,2,1,0,0,0,149,150,5,98,0,0,150,151,5,114,0,0,151,
        152,5,101,0,0,152,153,5,97,0,0,153,154,5,107,0,0,154,4,1,0,0,0,155,
        156,5,99,0,0,156,157,5,108,0,0,157,158,5,97,0,0,158,159,5,115,0,
        0,159,160,5,115,0,0,160,6,1,0,0,0,161,162,5,99,0,0,162,163,5,111,
        0,0,163,164,5,110,0,0,164,165,5,116,0,0,165,166,5,105,0,0,166,167,
        5,110,0,0,167,168,5,117,0,0,168,169,5,101,0,0,169,8,1,0,0,0,170,
        171,5,100,0,0,171,172,5,111,0,0,172,10,1,0,0,0,173,174,5,101,0,0,
        174,175,5,108,0,0,175,176,5,115,0,0,176,177,5,101,0,0,177,12,1,0,
        0,0,178,179,5,101,0,0,179,180,5,120,0,0,180,181,5,116,0,0,181,182,
        5,101,0,0,182,183,5,110,0,0,183,184,5,100,0,0,184,185,5,115,0,0,
        185,14,1,0,0,0,186,187,5,102,0,0,187,188,5,108,0,0,188,189,5,111,
        0,0,189,190,5,97,0,0,190,191,5,116,0,0,191,16,1,0,0,0,192,193,5,
        105,0,0,193,194,5,102,0,0,194,18,1,0,0,0,195,196,5,105,0,0,196,197,
        5,110,0,0,197,198,5,116,0,0,198,20,1,0,0,0,199,200,5,110,0,0,200,
        201,5,101,0,0,201,202,5,119,0,0,202,22,1,0,0,0,203,204,5,115,0,0,
        204,205,5,116,0,0,205,206,5,114,0,0,206,207,5,105,0,0,207,208,5,
        110,0,0,208,209,5,103,0,0,209,24,1,0,0,0,210,211,5,116,0,0,211,212,
        5,104,0,0,212,213,5,101,0,0,213,214,5,110,0,0,214,26,1,0,0,0,215,
        216,5,102,0,0,216,217,5,111,0,0,217,218,5,114,0,0,218,28,1,0,0,0,
        219,220,5,114,0,0,220,221,5,101,0,0,221,222,5,116,0,0,222,223,5,
        117,0,0,223,224,5,114,0,0,224,225,5,110,0,0,225,30,1,0,0,0,226,227,
        5,116,0,0,227,228,5,114,0,0,228,229,5,117,0,0,229,230,5,101,0,0,
        230,32,1,0,0,0,231,232,5,102,0,0,232,233,5,97,0,0,233,234,5,108,
        0,0,234,235,5,115,0,0,235,236,5,101,0,0,236,34,1,0,0,0,237,238,5,
        118,0,0,238,239,5,111,0,0,239,240,5,105,0,0,240,241,5,100,0,0,241,
        36,1,0,0,0,242,243,5,110,0,0,243,244,5,105,0,0,244,245,5,108,0,0,
        245,38,1,0,0,0,246,247,5,116,0,0,247,248,5,104,0,0,248,249,5,105,
        0,0,249,250,5,115,0,0,250,40,1,0,0,0,251,252,5,102,0,0,252,253,5,
        105,0,0,253,254,5,110,0,0,254,255,5,97,0,0,255,256,5,108,0,0,256,
        42,1,0,0,0,257,258,5,115,0,0,258,259,5,116,0,0,259,260,5,97,0,0,
        260,261,5,116,0,0,261,262,5,105,0,0,262,263,5,99,0,0,263,44,1,0,
        0,0,264,265,5,116,0,0,265,266,5,111,0,0,266,46,1,0,0,0,267,268,5,
        100,0,0,268,269,5,111,0,0,269,270,5,119,0,0,270,271,5,110,0,0,271,
        272,5,116,0,0,272,273,5,111,0,0,273,48,1,0,0,0,274,276,7,0,0,0,275,
        274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,
        279,1,0,0,0,279,280,6,24,0,0,280,50,1,0,0,0,281,285,5,35,0,0,282,
        284,8,1,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,
        286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,6,25,0,0,289,
        52,1,0,0,0,290,291,5,47,0,0,291,292,5,42,0,0,292,296,1,0,0,0,293,
        295,9,0,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,297,1,0,0,0,296,
        294,1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,300,5,42,0,0,300,
        301,5,47,0,0,301,302,1,0,0,0,302,303,6,26,0,0,303,54,1,0,0,0,304,
        305,5,43,0,0,305,56,1,0,0,0,306,307,5,45,0,0,307,58,1,0,0,0,308,
        309,5,42,0,0,309,60,1,0,0,0,310,311,5,47,0,0,311,62,1,0,0,0,312,
        313,5,37,0,0,313,64,1,0,0,0,314,315,5,92,0,0,315,66,1,0,0,0,316,
        317,5,61,0,0,317,318,5,61,0,0,318,68,1,0,0,0,319,320,5,33,0,0,320,
        321,5,61,0,0,321,70,1,0,0,0,322,323,5,62,0,0,323,72,1,0,0,0,324,
        325,5,60,0,0,325,74,1,0,0,0,326,327,5,62,0,0,327,328,5,61,0,0,328,
        76,1,0,0,0,329,330,5,60,0,0,330,331,5,61,0,0,331,78,1,0,0,0,332,
        333,5,38,0,0,333,334,5,38,0,0,334,80,1,0,0,0,335,336,5,124,0,0,336,
        337,5,124,0,0,337,82,1,0,0,0,338,339,5,33,0,0,339,84,1,0,0,0,340,
        341,5,94,0,0,341,86,1,0,0,0,342,343,5,58,0,0,343,344,5,61,0,0,344,
        88,1,0,0,0,345,346,5,61,0,0,346,90,1,0,0,0,347,348,5,91,0,0,348,
        92,1,0,0,0,349,350,5,93,0,0,350,94,1,0,0,0,351,352,5,40,0,0,352,
        96,1,0,0,0,353,354,5,41,0,0,354,98,1,0,0,0,355,356,5,123,0,0,356,
        100,1,0,0,0,357,358,5,125,0,0,358,102,1,0,0,0,359,360,5,59,0,0,360,
        104,1,0,0,0,361,362,5,58,0,0,362,106,1,0,0,0,363,364,5,46,0,0,364,
        108,1,0,0,0,365,366,5,44,0,0,366,110,1,0,0,0,367,368,5,126,0,0,368,
        112,1,0,0,0,369,370,5,38,0,0,370,114,1,0,0,0,371,373,3,131,65,0,
        372,371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,
        375,116,1,0,0,0,376,378,3,131,65,0,377,376,1,0,0,0,378,379,1,0,0,
        0,379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,385,5,46,0,
        0,382,384,3,131,65,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,
        0,0,385,386,1,0,0,0,386,397,1,0,0,0,387,385,1,0,0,0,388,390,7,2,
        0,0,389,391,7,3,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,393,1,0,
        0,0,392,394,3,131,65,0,393,392,1,0,0,0,394,395,1,0,0,0,395,393,1,
        0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,388,1,0,0,0,397,398,1,
        0,0,0,398,414,1,0,0,0,399,401,3,131,65,0,400,399,1,0,0,0,401,402,
        1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,406,
        7,2,0,0,405,407,7,3,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,409,
        1,0,0,0,408,410,3,131,65,0,409,408,1,0,0,0,410,411,1,0,0,0,411,409,
        1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,377,1,0,0,0,413,400,
        1,0,0,0,414,118,1,0,0,0,415,417,5,46,0,0,416,418,3,131,65,0,417,
        416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
        431,1,0,0,0,421,423,3,131,65,0,422,421,1,0,0,0,423,424,1,0,0,0,424,
        422,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,428,7,2,0,0,427,
        429,7,3,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,
        415,1,0,0,0,430,422,1,0,0,0,431,120,1,0,0,0,432,437,5,34,0,0,433,
        436,8,4,0,0,434,436,3,135,67,0,435,433,1,0,0,0,435,434,1,0,0,0,436,
        439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,
        437,1,0,0,0,440,441,5,34,0,0,441,122,1,0,0,0,442,447,5,34,0,0,443,
        446,8,4,0,0,444,446,3,135,67,0,445,443,1,0,0,0,445,444,1,0,0,0,446,
        449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,
        447,1,0,0,0,450,451,5,34,0,0,451,124,1,0,0,0,452,457,5,34,0,0,453,
        456,8,4,0,0,454,456,3,135,67,0,455,453,1,0,0,0,455,454,1,0,0,0,456,
        459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,
        457,1,0,0,0,460,461,3,137,68,0,461,126,1,0,0,0,462,467,5,34,0,0,
        463,466,8,4,0,0,464,466,3,135,67,0,465,463,1,0,0,0,465,464,1,0,0,
        0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,478,1,0,0,
        0,469,467,1,0,0,0,470,472,5,92,0,0,471,470,1,0,0,0,471,472,1,0,0,
        0,472,473,1,0,0,0,473,479,5,0,0,1,474,476,5,13,0,0,475,474,1,0,0,
        0,475,476,1,0,0,0,476,477,1,0,0,0,477,479,5,10,0,0,478,471,1,0,0,
        0,478,475,1,0,0,0,479,128,1,0,0,0,480,483,3,133,66,0,481,483,5,95,
        0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,489,1,0,0,0,484,488,3,133,
        66,0,485,488,3,131,65,0,486,488,5,95,0,0,487,484,1,0,0,0,487,485,
        1,0,0,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,
        1,0,0,0,490,130,1,0,0,0,491,489,1,0,0,0,492,493,7,5,0,0,493,132,
        1,0,0,0,494,495,7,6,0,0,495,134,1,0,0,0,496,497,5,92,0,0,497,498,
        7,7,0,0,498,136,1,0,0,0,499,500,5,92,0,0,500,501,8,7,0,0,501,138,
        1,0,0,0,502,503,9,0,0,0,503,140,1,0,0,0,32,0,277,285,296,374,379,
        385,390,395,397,402,406,411,413,419,424,428,430,435,437,445,447,
        455,457,465,467,471,475,478,482,487,489,1,6,0,0
    ]

class HLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOLEAN = 1
    BREAK = 2
    CLASS = 3
    CONTINUE = 4
    DO = 5
    ELSE = 6
    EXTENDS = 7
    FLOAT = 8
    IF = 9
    INT = 10
    NEW = 11
    STRING = 12
    THEN = 13
    FOR = 14
    RETURN = 15
    TRUE = 16
    FALSE = 17
    VOID = 18
    NIL = 19
    THIS = 20
    FINAL = 21
    STATIC = 22
    TO = 23
    DOWNTO = 24
    WS = 25
    LINE_COMMENT = 26
    BLOCK_COMMENT = 27
    ADD = 28
    SUB = 29
    MUL = 30
    DIV = 31
    MOD = 32
    BACKSLASH = 33
    EQ = 34
    NEQ = 35
    GT = 36
    LT = 37
    GTE = 38
    LTE = 39
    AND = 40
    OR = 41
    NOT = 42
    CONCAT = 43
    ASSIGN_OP = 44
    ASSIGN = 45
    LSB = 46
    RSB = 47
    LP = 48
    RP = 49
    LCB = 50
    RCB = 51
    SEMI = 52
    COLON = 53
    DOT = 54
    COMMA = 55
    TILDE = 56
    AMPERSAND = 57
    INT_LIT = 58
    FLOAT_LIT = 59
    ERROR_FLOAT = 60
    STRING_LIT = 61
    STRING_LITERAL = 62
    ILLEGAL_ESCAPE = 63
    UNCLOSE_STRING = 64
    IDENTIFIER = 65
    ERROR_CHAR = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'boolean'", "'break'", "'class'", "'continue'", "'do'", "'else'", 
            "'extends'", "'float'", "'if'", "'int'", "'new'", "'string'", 
            "'then'", "'for'", "'return'", "'true'", "'false'", "'void'", 
            "'nil'", "'this'", "'final'", "'static'", "'to'", "'downto'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'\\'", "'=='", "'!='", "'>'", 
            "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'", "'^'", "':='", 
            "'='", "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "':'", 
            "'.'", "','", "'~'", "'&'" ]

    symbolicNames = [ "<INVALID>",
            "BOOLEAN", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", "EXTENDS", 
            "FLOAT", "IF", "INT", "NEW", "STRING", "THEN", "FOR", "RETURN", 
            "TRUE", "FALSE", "VOID", "NIL", "THIS", "FINAL", "STATIC", "TO", 
            "DOWNTO", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "ADD", "SUB", 
            "MUL", "DIV", "MOD", "BACKSLASH", "EQ", "NEQ", "GT", "LT", "GTE", 
            "LTE", "AND", "OR", "NOT", "CONCAT", "ASSIGN_OP", "ASSIGN", 
            "LSB", "RSB", "LP", "RP", "LCB", "RCB", "SEMI", "COLON", "DOT", 
            "COMMA", "TILDE", "AMPERSAND", "INT_LIT", "FLOAT_LIT", "ERROR_FLOAT", 
            "STRING_LIT", "STRING_LITERAL", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", 
            "IDENTIFIER", "ERROR_CHAR" ]

    ruleNames = [ "BOOLEAN", "BREAK", "CLASS", "CONTINUE", "DO", "ELSE", 
                  "EXTENDS", "FLOAT", "IF", "INT", "NEW", "STRING", "THEN", 
                  "FOR", "RETURN", "TRUE", "FALSE", "VOID", "NIL", "THIS", 
                  "FINAL", "STATIC", "TO", "DOWNTO", "WS", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "ADD", "SUB", "MUL", "DIV", "MOD", "BACKSLASH", 
                  "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "AND", "OR", "NOT", 
                  "CONCAT", "ASSIGN_OP", "ASSIGN", "LSB", "RSB", "LP", "RP", 
                  "LCB", "RCB", "SEMI", "COLON", "DOT", "COMMA", "TILDE", 
                  "AMPERSAND", "INT_LIT", "FLOAT_LIT", "ERROR_FLOAT", "STRING_LIT", 
                  "STRING_LITERAL", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", 
                  "IDENTIFIER", "DIGIT", "LETTER", "ESCAPE_SEQ", "ILLEGAL_ESC", 
                  "ERROR_CHAR" ]

    grammarFileName = "OPLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        tk = self.type
        result = super().emit();
        if tk == self.UNCLOSE_STRING:       
            raise UncloseString(result.text[1:])
        elif tk == self.ILLEGAL_ESCAPE:
            raise IllegalEscape(result.text[1:])
        
        elif tk == self.STRING_LIT:
            result.text = result.text[1:-1]


        elif tk == self.ERROR_CHAR:
            raise ErrorToken(result.text); 
        elif tk == self.ERROR_FLOAT:
            raise ErrorToken(result.text); 
        else:
            return result


